<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Student Profile - <%= handle %></title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            text-align: center;
        }
        
        .header h1 {
            color: #333;
            margin: 0 0 10px 0;
        }
        
        .header p {
            color: #666;
            margin: 5px 0;
        }
        
        .back-btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #6c757d;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .back-btn:hover {
            background-color: #545b62;
        }
        
        .section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .section h2 {
            color: #333;
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        
        .filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            align-items: center;
        }
        
        .filter-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .filter-group label {
            font-weight: 600;
            color: #495057;
        }
        
        .filter-group select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .stat-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            border-left: 4px solid #007bff;
        }
        
        .stat-card h3 {
            margin: 0 0 5px 0;
            color: #495057;
            font-size: 14px;
        }
        
        .stat-card p {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 20px;
        }
        
        .contests-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .contests-table th,
        .contests-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        .contests-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #495057;
        }
        
        .contests-table tr:hover {
            background-color: #f8f9fa;
        }
        
        .rating-change {
            font-weight: bold;
        }
        
        .rating-change.positive {
            color: #28a745;
        }
        
        .rating-change.negative {
            color: #dc3545;
        }
        
        .heatmap-container {
            margin-top: 20px;
        }
        
        .heatmap {
            display: grid;
            grid-template-columns: repeat(53, 1fr);
            gap: 2px;
            margin-top: 10px;
        }
        
        .heatmap-day {
            width: 12px;
            height: 12px;
            border-radius: 2px;
            background-color: #ebedf0;
        }
        
        .heatmap-day[data-count="0"] { background-color: #ebedf0; }
        .heatmap-day[data-count="1"] { background-color: #9be9a8; }
        .heatmap-day[data-count="2"] { background-color: #40c463; }
        .heatmap-day[data-count="3"] { background-color: #30a14e; }
        .heatmap-day[data-count="4"] { background-color: #216e39; }
        
        .heatmap-legend {
            display: flex;
            align-items: center;
            gap: 5px;
            margin-top: 10px;
            font-size: 12px;
            color: #666;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 3px;
        }
        
        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 2px;
        }
        
        .no-data {
            text-align: center;
            color: #6c757d;
            font-style: italic;
            padding: 40px;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/students" class="back-btn">‚Üê Back to Students</a>
        
        <div class="header">
            <h1><%= handle %>'s Progress Dashboard</h1>
            <p>Comprehensive analysis of contest performance and problem solving patterns</p>
        </div>
        
        <!-- Contest History Section -->
        <div class="section">
            <h2>Contest History</h2>
            
            <div class="filters">
                <div class="filter-group">
                    <label>Time Period:</label>
                    <select id="contestFilter" onchange="updateContestData()">
                        <option value="30" <%= contestFilter === '30' ? 'selected' : '' %>>Last 30 days</option>
                        <option value="90" <%= contestFilter === '90' ? 'selected' : '' %>>Last 90 days</option>
                        <option value="365" <%= contestFilter === '365' ? 'selected' : '' %>>Last 365 days</option>
                    </select>
                </div>
            </div>
            
            <% if (contestStats.length === 0) { %>
                <div class="no-data">
                    <p>No contest data available for the selected period.</p>
                </div>
            <% } else { %>
                <div class="chart-container">
                    <canvas id="ratingChart"></canvas>
                </div>
                
                <table class="contests-table">
                    <thead>
                        <tr>
                            <th>Contest</th>
                            <th>Date</th>
                            <th>Rank</th>
                            <th>Old Rating</th>
                            <th>New Rating</th>
                            <th>Rating Change</th>
                            <th>Unsolved Problems</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% contestStats.forEach(contest => { %>
                            <tr>
                                <td><%= contest.contestName %></td>
                                <td><%= contest.date.toLocaleDateString() %></td>
                                <td><%= contest.rank %></td>
                                <td><%= contest.oldRating %></td>
                                <td><%= contest.newRating %></td>
                                <td class="rating-change <%= contest.ratingChange >= 0 ? 'positive' : 'negative' %>">
                                    <%= contest.ratingChange >= 0 ? '+' : '' %><%= contest.ratingChange %>
                                </td>
                                <td><%= contestUnsolvedProblems[contest.contestId] || 0 %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } %>
        </div>
        
        <!-- Problem Solving Data Section -->
        <div class="section">
            <h2>Problem Solving Data</h2>
            
            <div class="filters">
                <div class="filter-group">
                    <label>Time Period:</label>
                    <select id="problemFilter" onchange="updateProblemData()">
                        <option value="7" <%= problemFilter === '7' ? 'selected' : '' %>>Last 7 days</option>
                        <option value="30" <%= problemFilter === '30' ? 'selected' : '' %>>Last 30 days</option>
                        <option value="90" <%= problemFilter === '90' ? 'selected' : '' %>>Last 90 days</option>
                    </select>
                </div>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <h3>Total Problems Solved</h3>
                    <p><%= totalProblems %></p>
                </div>
                <div class="stat-card">
                    <h3>Average Rating</h3>
                    <p><%= averageRating %></p>
                </div>
                <div class="stat-card">
                    <h3>Problems/Day</h3>
                    <p><%= averageProblemsPerDay %></p>
                </div>
                <div class="stat-card">
                    <h3>Most Difficult Problem</h3>
                    <p><%= mostDifficultProblem ? mostDifficultProblem.problem.rating : 'N/A' %></p>
                </div>
            </div>
            
            <% if (Object.keys(ratingBuckets).length > 0) { %>
                <div class="chart-container">
                    <canvas id="ratingBucketsChart"></canvas>
                </div>
            <% } %>
            
            <div class="heatmap-container">
                <h3>Submission Heatmap</h3>
                <div class="heatmap" id="heatmap">
                    <!-- Heatmap will be generated by JavaScript -->
                </div>
                <div class="heatmap-legend">
                    <span>Less</span>
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: #ebedf0;"></div>
                        <span>0</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: #9be9a8;"></div>
                        <span>1</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: #40c463;"></div>
                        <span>2</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: #30a14e;"></div>
                        <span>3</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color" style="background-color: #216e39;"></div>
                        <span>4+</span>
                    </div>
                    <span>More</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Rating chart data
        const contestStats = <%- JSON.stringify(contestStats) %>;
        const ratingBuckets = <%- JSON.stringify(ratingBuckets) %>;
        const heatmapData = <%- JSON.stringify(heatmapData) %>;
        
        let ratingChart, ratingBucketsChart;
        
        function updateContestData() {
            const filter = document.getElementById('contestFilter').value;
            window.location.href = `/students/<%= handle %>?contestFilter=${filter}&problemFilter=<%= problemFilter %>`;
        }
        
        function updateProblemData() {
            const filter = document.getElementById('problemFilter').value;
            window.location.href = `/students/<%= handle %>?contestFilter=<%= contestFilter %>&problemFilter=${filter}`;
        }
        
        // Initialize rating chart
        if (contestStats.length > 0) {
            const ctx = document.getElementById('ratingChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: contestStats.map(c => {
                        // Use date as label if available, else contest number
                        if (c.date) {
                            const d = new Date(c.date);
                            return d.toLocaleDateString();
                        }
                        return c.contestName || '';
                    }),
                    datasets: [{
                        label: 'Rating Progression',
                        data: contestStats.map(c => c.newRating),
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Rating Progression'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'Rating'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Contest Date'
                            }
                        }
                    }
                }
            });
        }
        
        // Initialize rating buckets chart
        if (Object.keys(ratingBuckets).length > 0) {
            const ctx2 = document.getElementById('ratingBucketsChart').getContext('2d');
            const labels = Object.keys(ratingBuckets).sort((a, b) => parseInt(a) - parseInt(b));
            const data = labels.map(label => ratingBuckets[label]);
            
            ratingBucketsChart = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: labels.map(label => `${label}-${parseInt(label) + 99}`),
                    datasets: [{
                        label: 'Problems Solved',
                        data: data,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Problems Solved by Rating Range'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            },
                            title: {
                                display: true,
                                text: 'Number of Problems'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Rating Range'
                            }
                        }
                    }
                }
            });
        }
        
        // Generate heatmap
        function generateHeatmap() {
            const heatmapContainer = document.getElementById('heatmap');
            const today = new Date();
            const startDate = new Date(today);
            startDate.setDate(startDate.getDate() - 365);
            
            // Generate all days for the past year
            for (let d = new Date(startDate); d <= today; d.setDate(d.getDate() + 1)) {
                const dateStr = d.toISOString().split('T')[0];
                const count = heatmapData[dateStr] || 0;
                const clampedCount = Math.min(count, 4);
                
                const dayElement = document.createElement('div');
                dayElement.className = 'heatmap-day';
                dayElement.setAttribute('data-count', clampedCount);
                dayElement.title = `${dateStr}: ${count} submissions`;
                
                heatmapContainer.appendChild(dayElement);
            }
        }
        
        // Initialize heatmap
        generateHeatmap();
    </script>
</body>
</html>